0x000 30 F4 00 02 00 00 00 00 00 00               |irmovq stack, %rsp
0x00A 80 38 00 00 00 00 00 00 00                  |call main
0x013 00                                          |halt
array
0x018 0D 00 0D 00 0D 00 00 00                     |.quad 0x0000000d000d000d
0x020 40 FF 3F FF 3F FF FF FF                     |.quad 0xffffff3fff3fff40
0x028 00 0B 00 0B 00 0B 00 00                     |.quad 0x00000b000b000b00
0x030 00 60 FF 5F FF 5F FF FF                     |.quad 0xffff5fff5fff6000
main
0x038 30 F7 18 00 00 00 00 00 00 00               |irmovq array,%rdi
0x042 30 F6 04 00 00 00 00 00 00 00               |irmovq $4,%rsi
0x04C 80 56 00 00 00 00 00 00 00                  |call absSum
0x055 90                                          |ret
absSum
0x056 30 F8 08 00 00 00 00 00 00 00               |irmovq $8,%r8
0x060 30 F9 01 00 00 00 00 00 00 00               |irmovq $1,%r9
0x06A 63 00                                       |xorq %rax,%rax
0x06C 62 66                                       |andq %rsi,%rsi
0x06E 70 8D 00 00 00 00 00 00 00                  |jmp  0x08d
loop
0x077 50 A7 00 00 00 00 00 00 00 00               |mrmovq (%rdi),%r10
0x081 63 BB                                       |xorq %r11,%r11
0x083 61 AB                                       |subq %r10,%r11
0x085 26 BA                                       |cmovg %r11,%r10
0x087 60 A0                                       |addq %r10,%rax
0x089 60 87                                       |addq %r8,%rdi
0x08B 61 96                                       |subq %r9,%rsi
test
0x08D 74 77 00 00 00 00 00 00 00                  |jne    loop
0x096 90                                          |ret
stack
