Y86处理器应用：

打开Y86文件夹中的UI_2D.exe，可以运行Y86处理器

运行环境：
Windows10 版本1803
.NET Framework 4.0及以上
Screen resolution选择1280*720。

界面介绍：

左侧（从上往下）：

文本输入框/···/Choose：
在左上方文本框1中输入文件路径，或者点击文本框1左下方的···按钮，通过windows窗口选择要输入的文件，之后该文件路径会显示在文本框1中。确认后按下Choose键可读入该文件
通过上述方法输入文件路径后，然后按下Choose键可读入该文件。同时若不存在目标文件，则在文本框1中显示”No Such File”；
若目标文件不是合法的文件类型（.ys/.yo），则在文本框1中显示“Invalid File”；若目标文件存在且合法，则显示“Find the Target”。
同时在点击Choose后应用上的所有状态全部清空，变成应用打开时的初始状态。
支持Y86二进制代码文件和Y86汇编代码文件

Reset/Step/Run:
单击左侧Step键可以让Y86执行一个时钟周期。
单击左侧Run键可以让Y86持续运行，Run键上方滑动条可调节运行速度，越往右运行越快，同时在滑动条右侧可以得到速度的数值大小（越大越快）。在点击Run后按钮会变成Stop，这时在点击Stop按钮可以令程序停止，并且按钮重新变成Run。
按下右上方Reset键清空应用所有状态，若再次运行必须读入文件路径。

Next:
持续执行直到当前处于取指阶段的命令在内存中的下一条命令也进入取指阶段为止

断点窗口/Add/Del/Continue
    
点，点击Continue来跳到下一个断点。
对于Del，在输入框中输入要删除的断点的序号（第几个断点），以0x或0X开头，则视为读入十六进制的序号，否则视为读入十进制表示的序号。之后点击Del。若输入不合法，则断点窗口没反应。
对于Add，按以下格式输入：
    对于普通断点，只要输入一个数值就可以跳转。若该数值以0x或0X开头，则视为读入十六进制的断点，否则视为读入十进制表示的断点。该数值中间不能有空格；
    对于条件断点，格式为”断点位置 if 寄存器名称 判断条件 数值”断点位置的格式与普通断点输入格式相同，接下去需要输入” if 寄存器名称 判断条件 数值“形式的字符串。
    if和寄存器名字之间需要加若干个空格，寄存器名称为全大写或全小写的rax/RAX、rcx/RCX等15个寄存器名称，判断条件为==、<、>、>=、<=之一，数值的输入格式也为以0x开头的十六进制或不加的十进制，负数的话需要在数值最前面加负号。
    数值、寄存器名称、if各自中间都不能空格，例如“R AX”就是不合法的。但是它们之间可以有空格，例如”if  RAX== 1 ”就是合法的。
	条件断点会跳转到第一次满足条件（寄存器的值变成设定值）时的断点位置。
之后点击Add，若格式不合法，则断点窗口无反应。
程序可以跳转到第一个到达的断点，之后该断点会被用红色字体显示出来。
寄存器的值需要在跳转到断点的时候或之前在译码、执行、访存、写回阶段就已经被算出，否则就只能根据在执行到断点当前已得到的寄存器的数值进行判断。
因此，若需要在满足某个条件时跳转到某一条指令，可以在该指令后面加上若干个(4个就一定可行)nop指令并跳转到最后一个nop上，使执行到该nop操作时寄存器的值能够被更新出来。
同时，该断点个数最多只有100个，对于存储空间只有0xFFF的程序来说还是绰绰有余的。若当前跳到某个断点时，断点会显示在断点窗口的最上方并用红色字体标出。
按下Continue即可跳转。
断点可以通过拖动断点显示窗口右侧的滑轮来显示其余断点信息。
断点的标号、数值显示格式也受左下角十进制/十六进制显示格式的控制。


Code:
显示二进制代码及其对应的汇编代码

Hex/Dec/uDec:
按钮上现实的当前使用的进制，可以通过单击按钮使进制按照Hex/Dec/uDec的顺序循环切换。单击该键可在十六进制、有符号十进制和无符号使进制之间切换各阶段与寄存器展示值的进制格式。

Exit:
退出应用

快捷键:
F9相当于Run、F10相当于Next、F11相当于Step、F6相当于Continue、F5相当于Reset

中间部分：

5个流水线显示在中间Write_Bace/Memory/Excute/Decode/Fetch处，同时三个条件码显示在中间Excute阶段内。
在下方显示当前的时钟周期和流水线每个命令需要几个时钟周期（CPI）。
中间面板的右侧竖着显示流水线逻辑控制程序所控制的流水线各阶段的状态，SAOK为正常，SBUB表示该阶段为气泡，STAL表示该阶段为暂停。
中间面板左上方为程序总的运行状态。对于总的及个流水线寄存器的状态来说，SAOK为正常，SMEM为出现访存错误，SINS为出现错误指令。

右上方:

15个寄存器显示在左上方面板Registers处。

右下方：

右下方的面板Memory内可显示48位内存（8为一行）。若要调节显示哪些位置的内存，可点击框3中的箭头符号，切换显示的内存信息的开头位置。
若要看所有位置上的内存，可点击print，程序会在exe文件同一目录下打印一个memry.out来显示所有的内存。若当前的显示进制是十六进制，那么就十六位一行，否则就十位一行


其它包含的文件:

Code文件夹:
应用程序的源代码

实验报告.pdf

code.out/memory.out/log.out:
分别对应Y86代码文件、总体内存输出文件、处理器运行时各流水线寄存器状态的日志

WinPixEventRuntime.dll/UnityPlayer.dll/MonoBleedingEdge/UI_2D_Data:
Y86应用的配置文件